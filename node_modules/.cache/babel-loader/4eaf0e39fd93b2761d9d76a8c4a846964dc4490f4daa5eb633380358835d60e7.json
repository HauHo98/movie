{"ast":null,"code":"import React,{useEffect,useContext}from'react';import{nanoid}from\"nanoid\";import Contextpage from'../Contextpage';import{motion,AnimatePresence}from'framer-motion';import InfiniteScroll from'react-infinite-scroll-component';import MovieCard from'../components/MovieCard.jsx';import Header from'../components/Header';import HeroMovies from'../components/HeroMovies.jsx';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Home(){const{fetchTrending,loader,page,setPage,totalPage,setTrending,trending}=useContext(Contextpage);useEffect(()=>{setPage(1);// Reset Page to 1 on initial render.\nfetchTrending();},[]);// useEffect(() => {\n//     setMovies([])  // Reset movies on genre change so that movies of other genre will not appear at top.\n//     setPage(0)\n//     /* Set page to 0, it will automatically increment to 1 and will cause re render even if the page is already set to 1. The increment function is in context page.\n//     It is important to set page to 0, as on changing genre, if page is already set to 1 then the fetch function will not work as the page state variable is not changed, that's why we are setting page to 0 to force re-render. \n//     */\n// }, [activegenre]);\n// useEffect(() => {\n//     console.log(trending);\n//   console.log(page)\n//     if (page > 0) {\n//         fetchTrending();\n//     }\n// }, [page])\nreturn/*#__PURE__*/ (// md:p-10\n_jsxs(\"div\",{className:\"w-full   mb-20 md:mb-0\",children:[/*#__PURE__*/_jsx(motion.div,{layout:true,className:\"flex flex-wrap relative justify-evenly md:justify-around\",children:/*#__PURE__*/_jsx(AnimatePresence,{children:loader?/*#__PURE__*/_jsx(\"span\",{className:\"loader m-10\"}):/*#__PURE__*/_jsx(HeroMovies,{movie:trending[0]},trending[0].id)})}),/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(motion.div,{layout:true,className:\"flex flex-wrap relative justify-evenly md:justify-around\",children:/*#__PURE__*/_jsx(AnimatePresence,{children:loader?/*#__PURE__*/_jsx(\"span\",{className:\"loader m-10\"}):/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(InfiniteScroll,{className:\"w-full md:p-2 flex flex-wrap relative justify-evenly md:justify-around\",dataLength:trending.length//This is important field to render the next data\n,next:()=>setPage(page+1),hasMore:page<totalPage,loader:/*#__PURE__*/_jsx(\"span\",{className:\"loader m-10\"}),scrollThreshol:0.9,style:{overflow:'hidden'},children:trending.map(trd=>/*#__PURE__*/_jsx(MovieCard,{movie:trd},nanoid()))})})})})]}));}export default Home;","map":{"version":3,"names":["React","useEffect","useContext","nanoid","Contextpage","motion","AnimatePresence","InfiniteScroll","MovieCard","Header","HeroMovies","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Home","fetchTrending","loader","page","setPage","totalPage","setTrending","trending","className","children","div","layout","movie","id","dataLength","length","next","hasMore","scrollThreshol","style","overflow","map","trd"],"sources":["/Users/admin/Desktop/movie/src/pages/Home.jsx"],"sourcesContent":["import React, { useEffect, useContext } from 'react'\nimport {nanoid} from \"nanoid\";\nimport Contextpage from '../Contextpage';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport MovieCard from '../components/MovieCard.jsx';\nimport Header from '../components/Header';\nimport HeroMovies from '../components/HeroMovies.jsx';\n\n\nfunction Home() {\n\n    const { fetchTrending, loader, page, setPage, totalPage, setTrending, trending } = useContext(Contextpage);\n\n    useEffect(() => {\n        setPage(1) // Reset Page to 1 on initial render.\n        fetchTrending();\n    }, []);\n    \n    // useEffect(() => {\n    //     setMovies([])  // Reset movies on genre change so that movies of other genre will not appear at top.\n    //     setPage(0)\n    //     /* Set page to 0, it will automatically increment to 1 and will cause re render even if the page is already set to 1. The increment function is in context page.\n    //     It is important to set page to 0, as on changing genre, if page is already set to 1 then the fetch function will not work as the page state variable is not changed, that's why we are setting page to 0 to force re-render. \n    //     */\n    // }, [activegenre]);\n\n    // useEffect(() => {\n    //     console.log(trending);\n    //   console.log(page)\n    //     if (page > 0) {\n    //         fetchTrending();\n    //     }\n    // }, [page])\n\n    return (\n        // md:p-10\n        <div className='w-full   mb-20 md:mb-0'> \n            <motion.div\n                    layout\n                    className=\"flex flex-wrap relative justify-evenly md:justify-around\">\n                    <AnimatePresence>\n                        {\n                            loader ? <span className=\"loader m-10\"></span> :\n                            <HeroMovies key={trending[0].id} movie={trending[0]} />\n                        }\n                    </AnimatePresence>\n                </motion.div>\n            {/* <Genre /> */}\n            <Header />\n            <motion.div\n                layout\n                className=\"flex flex-wrap relative justify-evenly md:justify-around\">\n                <AnimatePresence>\n                    {\n                        loader ? <span className=\"loader m-10\"></span> :\n                            <>\n                                {/* {console.log(movies.length)} */}\n                                <InfiniteScroll\n                                    className=\"w-full md:p-2 flex flex-wrap relative justify-evenly md:justify-around\"\n                                    dataLength={trending.length} //This is important field to render the next data\n                                    next={() => setPage(page + 1)}\n                                    hasMore={page < totalPage}\n                                    loader={<span className=\"loader m-10\"></span>}\n                                    scrollThreshol={0.9}\n                                    style={{ overflow: 'hidden' }}\n                                >\n\n                                    {trending.map((trd) => (\n                                        <MovieCard key={nanoid()} movie={trd} />\n                                    ))}\n\n                                </InfiniteScroll>\n\n                            </>\n                    }\n                </AnimatePresence>\n            </motion.div>\n            {/* <Pagebtn /> */}\n\n        </div>\n    )\n}\n\nexport default Home;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,UAAU,KAAQ,OAAO,CACpD,OAAQC,MAAM,KAAO,QAAQ,CAC7B,MAAO,CAAAC,WAAW,KAAM,gBAAgB,CACxC,OAASC,MAAM,CAAEC,eAAe,KAAQ,eAAe,CACvD,MAAO,CAAAC,cAAc,KAAM,iCAAiC,CAC5D,MAAO,CAAAC,SAAS,KAAM,6BAA6B,CACnD,MAAO,CAAAC,MAAM,KAAM,sBAAsB,CACzC,MAAO,CAAAC,UAAU,KAAM,8BAA8B,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,QAAA,IAAAC,SAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAGtD,QAAS,CAAAC,IAAIA,CAAA,CAAG,CAEZ,KAAM,CAAEC,aAAa,CAAEC,MAAM,CAAEC,IAAI,CAAEC,OAAO,CAAEC,SAAS,CAAEC,WAAW,CAAEC,QAAS,CAAC,CAAGtB,UAAU,CAACE,WAAW,CAAC,CAE1GH,SAAS,CAAC,IAAM,CACZoB,OAAO,CAAC,CAAC,CAAC,CAAC;AACXH,aAAa,CAAC,CAAC,CACnB,CAAC,CAAE,EAAE,CAAC,CAEN;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,oBACI;AACAF,KAAA,QAAKS,SAAS,CAAC,wBAAwB,CAAAC,QAAA,eACnCd,IAAA,CAACP,MAAM,CAACsB,GAAG,EACHC,MAAM,MACNH,SAAS,CAAC,0DAA0D,CAAAC,QAAA,cACpEd,IAAA,CAACN,eAAe,EAAAoB,QAAA,CAERP,MAAM,cAAGP,IAAA,SAAMa,SAAS,CAAC,aAAa,CAAO,CAAC,cAC9Cb,IAAA,CAACF,UAAU,EAAsBmB,KAAK,CAAEL,QAAQ,CAAC,CAAC,CAAE,EAAnCA,QAAQ,CAAC,CAAC,CAAC,CAACM,EAAyB,CAAC,CAE9C,CAAC,CACV,CAAC,cAEjBlB,IAAA,CAACH,MAAM,GAAE,CAAC,cACVG,IAAA,CAACP,MAAM,CAACsB,GAAG,EACPC,MAAM,MACNH,SAAS,CAAC,0DAA0D,CAAAC,QAAA,cACpEd,IAAA,CAACN,eAAe,EAAAoB,QAAA,CAERP,MAAM,cAAGP,IAAA,SAAMa,SAAS,CAAC,aAAa,CAAO,CAAC,cAC1Cb,IAAA,CAAAE,SAAA,EAAAY,QAAA,cAEId,IAAA,CAACL,cAAc,EACXkB,SAAS,CAAC,wEAAwE,CAClFM,UAAU,CAAEP,QAAQ,CAACQ,MAAQ;AAAA,CAC7BC,IAAI,CAAEA,CAAA,GAAMZ,OAAO,CAACD,IAAI,CAAG,CAAC,CAAE,CAC9Bc,OAAO,CAAEd,IAAI,CAAGE,SAAU,CAC1BH,MAAM,cAAEP,IAAA,SAAMa,SAAS,CAAC,aAAa,CAAO,CAAE,CAC9CU,cAAc,CAAE,GAAI,CACpBC,KAAK,CAAE,CAAEC,QAAQ,CAAE,QAAS,CAAE,CAAAX,QAAA,CAG7BF,QAAQ,CAACc,GAAG,CAAEC,GAAG,eACd3B,IAAA,CAACJ,SAAS,EAAgBqB,KAAK,CAAEU,GAAI,EAArBpC,MAAM,CAAC,CAAgB,CAC1C,CAAC,CAEU,CAAC,CAEnB,CAAC,CAEE,CAAC,CACV,CAAC,EAGZ,CAAC,EAEd,CAEA,cAAe,CAAAc,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}