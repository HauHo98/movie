{"ast":null,"code":"import React,{useEffect,useContext}from'react';import Contextpage from'../Contextpage';import MovieCard from'./MovieCard.jsx';import{motion,AnimatePresence}from'framer-motion';import Genre from'./Genre';import Header from'./Header';// import { Pagebtn } from './Pagebtn';\nimport InfiniteScroll from'react-infinite-scroll-component';import Trending from'../pages/Trending';import HeroMovies from'./HeroMovies.jsx';import{uid}from\"react-uid\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Movies(){const{movies,loader,page,setPage,totalPage,genreList,activegenre,filteredGenre,fetchGenre}=useContext(Contextpage);useEffect(()=>{setPage(1);// Reset Page to 1 on initial render.\n},[]);useEffect(()=>{if(page>0){fetchGenre();}},[page]);// // useEffect(() => {\n// //     setMovies([])  // Reset movies on genre change so that movies of other genre will not appear at top.\n// //     setPage(0)\n// //     /* Set page to 0, it will automatically increment to 1 and will cause re render even if the page is already set to 1. The increment function is in context page.\n// //     It is important to set page to 0, as on changing genre, if page is already set to 1 then the fetch function will not work as the page state variable is not changed, that's why we are setting page to 0 to force re-render. \n// //     */\n// // }, [activegenre]);\n// useEffect(() => {\n//     if (page > 0) {\n//         filteredGenre(); // Fetch filtered genre when page changes and only if page is greater than 0.\n//     }\n// }, [page])\n// /* Page is dependency here, the funtion will only run if new page value is different from previous. \n// That's why we are first setting page=0, then context page will automatically increment page=1 and the function will run. \n// */\nreturn/*#__PURE__*/ (// md:p-10\n_jsxs(\"div\",{className:\"w-full   mb-20 md:mb-0\",children:[\" \\xE1dasd\\xE1dasd\",/*#__PURE__*/_jsx(Genre,{}),/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(motion.div,{layout:true,className:\"flex flex-wrap relative justify-evenly md:justify-around\",children:/*#__PURE__*/_jsx(AnimatePresence,{children:loader?/*#__PURE__*/_jsx(\"span\",{className:\"loader m-10\"}):/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(InfiniteScroll,{className:\"w-full md:p-2 flex flex-wrap relative justify-evenly md:justify-around\",dataLength:genreList.length//This is important field to render the next data\n,next:()=>setPage(page+1),hasMore:page<totalPage,loader:/*#__PURE__*/_jsx(\"span\",{className:\"loader m-10\"}),scrollThreshol:0.9,style:{overflow:'hidden'},children:genreList.map((movie,index)=>/*#__PURE__*/_jsx(MovieCard,{movie:movie},uid(movie.id,index)))})})})})]}));}export default Movies;//   `https://api.themoviedb.org/3/trending/all/day?api_key=b454aa11fb4b5fc5b515d2e80a898a1c&page=${page}`","map":{"version":3,"names":["React","useEffect","useContext","Contextpage","MovieCard","motion","AnimatePresence","Genre","Header","InfiniteScroll","Trending","HeroMovies","uid","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Movies","movies","loader","page","setPage","totalPage","genreList","activegenre","filteredGenre","fetchGenre","className","children","div","layout","dataLength","length","next","hasMore","scrollThreshol","style","overflow","map","movie","index","id"],"sources":["/Users/admin/Desktop/movie/src/components/Movies.jsx"],"sourcesContent":["import React, { useEffect, useContext } from 'react'\nimport Contextpage from '../Contextpage';\nimport MovieCard from './MovieCard.jsx';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport Genre from './Genre';\nimport Header from './Header';\n// import { Pagebtn } from './Pagebtn';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Trending from '../pages/Trending';\nimport HeroMovies from './HeroMovies.jsx';\nimport {uid} from \"react-uid\";\n\n\nfunction Movies() {\n\n    const { movies, loader, page, setPage, totalPage, genreList, activegenre, filteredGenre, fetchGenre } = useContext(Contextpage);\n   \n\n    useEffect(() => {\n        setPage(1) // Reset Page to 1 on initial render.\n    }, []);\n\n    useEffect(() => {\n        if (page > 0) {\n            fetchGenre();\n        }\n    }, [page])\n\n    \n    // // useEffect(() => {\n    // //     setMovies([])  // Reset movies on genre change so that movies of other genre will not appear at top.\n    // //     setPage(0)\n    // //     /* Set page to 0, it will automatically increment to 1 and will cause re render even if the page is already set to 1. The increment function is in context page.\n    // //     It is important to set page to 0, as on changing genre, if page is already set to 1 then the fetch function will not work as the page state variable is not changed, that's why we are setting page to 0 to force re-render. \n    // //     */\n    // // }, [activegenre]);\n\n    // useEffect(() => {\n    //     if (page > 0) {\n            \n    //         filteredGenre(); // Fetch filtered genre when page changes and only if page is greater than 0.\n    //     }\n    // }, [page])\n    // /* Page is dependency here, the funtion will only run if new page value is different from previous. \n    // That's why we are first setting page=0, then context page will automatically increment page=1 and the function will run. \n    // */\n\n\n    return (\n        // md:p-10\n        <div className='w-full   mb-20 md:mb-0'> ádasdádasd\n            {/* <motion.div\n                    layout\n                    className=\"flex flex-wrap relative justify-evenly md:justify-around\">\n                    <AnimatePresence>\n                        {\n                            loader ? <span className=\"loader m-10\"></span> :\n                            <HeroMovies key={movies[0].id} movie={movies[0]} />\n                        }\n                    </AnimatePresence>\n                </motion.div> */}\n            <Genre />\n            <Header />\n            <motion.div\n                layout\n                className=\"flex flex-wrap relative justify-evenly md:justify-around\">\n                <AnimatePresence>\n                    {\n                        loader ? <span className=\"loader m-10\"></span> :\n                            <>\n                                <InfiniteScroll\n                                    className=\"w-full md:p-2 flex flex-wrap relative justify-evenly md:justify-around\"\n                                    dataLength={genreList.length} //This is important field to render the next data\n                                    next={() => setPage(page + 1)}\n                                    hasMore={page < totalPage}\n                                    loader={<span className=\"loader m-10\"></span>}\n                                    scrollThreshol={0.9}\n                                    style={{ overflow: 'hidden' }}\n                                >\n\n                                    {genreList.map((movie, index) => (\n                                        <MovieCard key={uid(movie.id, index)} movie={movie} />\n                                    ))}\n\n                                </InfiniteScroll>\n\n                            </>\n                    }\n                </AnimatePresence>\n            </motion.div>\n            {/* <Pagebtn /> */}\n\n        </div>\n    )\n}\n\nexport default Movies\n\n\n//   `https://api.themoviedb.org/3/trending/all/day?api_key=b454aa11fb4b5fc5b515d2e80a898a1c&page=${page}`"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,UAAU,KAAQ,OAAO,CACpD,MAAO,CAAAC,WAAW,KAAM,gBAAgB,CACxC,MAAO,CAAAC,SAAS,KAAM,iBAAiB,CACvC,OAASC,MAAM,CAAEC,eAAe,KAAQ,eAAe,CACvD,MAAO,CAAAC,KAAK,KAAM,SAAS,CAC3B,MAAO,CAAAC,MAAM,KAAM,UAAU,CAC7B;AACA,MAAO,CAAAC,cAAc,KAAM,iCAAiC,CAC5D,MAAO,CAAAC,QAAQ,KAAM,mBAAmB,CACxC,MAAO,CAAAC,UAAU,KAAM,kBAAkB,CACzC,OAAQC,GAAG,KAAO,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,QAAA,IAAAC,SAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAG9B,QAAS,CAAAC,MAAMA,CAAA,CAAG,CAEd,KAAM,CAAEC,MAAM,CAAEC,MAAM,CAAEC,IAAI,CAAEC,OAAO,CAAEC,SAAS,CAAEC,SAAS,CAAEC,WAAW,CAAEC,aAAa,CAAEC,UAAW,CAAC,CAAG1B,UAAU,CAACC,WAAW,CAAC,CAG/HF,SAAS,CAAC,IAAM,CACZsB,OAAO,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAE,EAAE,CAAC,CAENtB,SAAS,CAAC,IAAM,CACZ,GAAIqB,IAAI,CAAG,CAAC,CAAE,CACVM,UAAU,CAAC,CAAC,CAChB,CACJ,CAAC,CAAE,CAACN,IAAI,CAAC,CAAC,CAGV;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA,oBACI;AACAJ,KAAA,QAAKW,SAAS,CAAC,wBAAwB,CAAAC,QAAA,EAAC,mBACpC,cAUAhB,IAAA,CAACP,KAAK,GAAE,CAAC,cACTO,IAAA,CAACN,MAAM,GAAE,CAAC,cACVM,IAAA,CAACT,MAAM,CAAC0B,GAAG,EACPC,MAAM,MACNH,SAAS,CAAC,0DAA0D,CAAAC,QAAA,cACpEhB,IAAA,CAACR,eAAe,EAAAwB,QAAA,CAERT,MAAM,cAAGP,IAAA,SAAMe,SAAS,CAAC,aAAa,CAAO,CAAC,cAC1Cf,IAAA,CAAAE,SAAA,EAAAc,QAAA,cACIhB,IAAA,CAACL,cAAc,EACXoB,SAAS,CAAC,wEAAwE,CAClFI,UAAU,CAAER,SAAS,CAACS,MAAQ;AAAA,CAC9BC,IAAI,CAAEA,CAAA,GAAMZ,OAAO,CAACD,IAAI,CAAG,CAAC,CAAE,CAC9Bc,OAAO,CAAEd,IAAI,CAAGE,SAAU,CAC1BH,MAAM,cAAEP,IAAA,SAAMe,SAAS,CAAC,aAAa,CAAO,CAAE,CAC9CQ,cAAc,CAAE,GAAI,CACpBC,KAAK,CAAE,CAAEC,QAAQ,CAAE,QAAS,CAAE,CAAAT,QAAA,CAG7BL,SAAS,CAACe,GAAG,CAAC,CAACC,KAAK,CAAEC,KAAK,gBACxB5B,IAAA,CAACV,SAAS,EAA4BqC,KAAK,CAAEA,KAAM,EAAnC7B,GAAG,CAAC6B,KAAK,CAACE,EAAE,CAAED,KAAK,CAAkB,CACxD,CAAC,CAEU,CAAC,CAEnB,CAAC,CAEE,CAAC,CACV,CAAC,EAGZ,CAAC,EAEd,CAEA,cAAe,CAAAvB,MAAM,CAGrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}