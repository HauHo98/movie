{"ast":null,"code":"import{createContext,useState,useEffect}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";const Contextpage=/*#__PURE__*/createContext();export function MovieProvider(_ref){let{children}=_ref;const[header,setHeader]=useState(\"Trending\");const[totalPage,setTotalPage]=useState(null);const[movies,setMovies]=useState([]);const[searchedMovies,setSearchedMovies]=useState([]);const[trending,setTrending]=useState([]);const[genreList,setGenreList]=useState([]);const[upcoming,setUpcoming]=useState([]);const[page,setPage]=useState(1);const[activegenre,setActiveGenre]=useState(28);const[genres,setGenres]=useState([]);const[loader,setLoader]=useState(true);const[backgenre,setBackGenre]=useState(false);const APIKEY=process.env.REACT_APP_API_KEY;useEffect(()=>{if(page<1){setPage(1);// Increment page to 1 if it is less than 1.\n}},[page]);const filteredGenre=async()=>{const data=await fetch(\"https://api.themoviedb.org/3/discover/movie?with_genres=\".concat(activegenre,\"&api_key=\").concat(APIKEY,\"&with_origin_country=IN&page=\").concat(page));const filteredGenre=await data.json();setMovies(movies.concat(filteredGenre.results));// Concat new movies with previous movies, on genre change movies are reset to [] so that only movies of new genre will appear, check out useEffect on top for more information.\nsetTotalPage(filteredGenre.total_pages);setLoader(false);setHeader(\"Genres\");};const fetchSearch=async query=>{const data=await fetch(\"https://api.themoviedb.org/3/search/movie?api_key=\".concat(APIKEY,\"&with_origin_country=IN&language=en-US&query=\").concat(query,\"&page=1&include_adult=false\"));const searchmovies=await data.json();setSearchedMovies(searchmovies.results);setLoader(false);setHeader(\"Results for \\\"\".concat(query,\"\\\"\"));};const fetchGenre=async()=>{// const data = await fetch(\n//   `https://api.themoviedb.org/3/genre/movie/list?api_key=${APIKEY}&with_origin_country=IN&language=en-US`\n// );\n// const gen = await data.json();\n// setGenres(gen.genres);\n// setLoader(false);\n// setMovies(movies.concat(filteredGenre.results)); // Concat new movies with previous movies, on genre change movies are reset to [] so that only movies of new genre will appear, check out useEffect on top for more information.\n// setTotalPage(filteredGenre.total_pages);\n// setLoader(false);\n// setHeader(\"Genres\");\nconst data=await fetch(\"https://api.themoviedb.org/3/genre/movie/list?api_key=\".concat(APIKEY,\"&with_origin_country=IN&language=en-US\"));const genRes=await data.json();setGenreList(genreList.concat(genRes.results));setTotalPage(genRes.total_pages);setLoader(false);setHeader(\"Genres Movies\");};const fetchTrending=async()=>{const data=await fetch(\"https://api.themoviedb.org/3/trending/movie/day?api_key=\".concat(APIKEY,\"&with_origin_country=IN&page=\").concat(page));const trend=await data.json();setTrending(trending.concat(trend.results));setTotalPage(trend.total_pages);setLoader(false);setHeader(\"Trending Movies\");};const fetchUpcoming=async()=>{const data=await fetch(\"https://api.themoviedb.org/3/movie/upcoming?api_key=\".concat(APIKEY,\"&with_origin_country=IN&language=en-US&page=\").concat(page));const upc=await data.json();setUpcoming(upcoming.concat(upc.results));setTotalPage(upc.total_pages);setLoader(false);setHeader(\"Upcoming Movies\");};// creat local storage\nconst GetFavorite=()=>{setLoader(false);setHeader(\"Favorite Movies\");};return/*#__PURE__*/_jsx(Contextpage.Provider,{value:{fetchGenre,genres,setGenres,filteredGenre,header,setHeader,movies,setMovies,page,setPage,activegenre,setActiveGenre,fetchSearch,loader,setBackGenre,backgenre,setLoader,fetchTrending,trending,fetchUpcoming,setTrending,upcoming,GetFavorite,totalPage,searchedMovies},children:children});}export default Contextpage;","map":{"version":3,"names":["createContext","useState","useEffect","jsx","_jsx","Contextpage","MovieProvider","_ref","children","header","setHeader","totalPage","setTotalPage","movies","setMovies","searchedMovies","setSearchedMovies","trending","setTrending","genreList","setGenreList","upcoming","setUpcoming","page","setPage","activegenre","setActiveGenre","genres","setGenres","loader","setLoader","backgenre","setBackGenre","APIKEY","process","env","REACT_APP_API_KEY","filteredGenre","data","fetch","concat","json","results","total_pages","fetchSearch","query","searchmovies","fetchGenre","genRes","fetchTrending","trend","fetchUpcoming","upc","GetFavorite","Provider","value"],"sources":["/Users/admin/Desktop/movie/src/Contextpage.jsx"],"sourcesContent":["import { createContext, useState, useEffect } from \"react\";\n\nconst Contextpage = createContext();\n\nexport function MovieProvider({ children }) {\n\n  const [header, setHeader] = useState(\"Trending\");\n  const [totalPage, setTotalPage] = useState(null)\n  const [movies, setMovies] = useState([]);\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const [trending, setTrending] = useState([]);\n  const [genreList, setGenreList] = useState([]);\n  const [upcoming, setUpcoming] = useState([]);\n  const [page, setPage] = useState(1);\n  const [activegenre, setActiveGenre] = useState(28);\n  const [genres, setGenres] = useState([])\n  const [loader, setLoader] = useState(true);\n  const [backgenre, setBackGenre] = useState(false);\n\n  const APIKEY = process.env.REACT_APP_API_KEY;\n\n\n  useEffect(() => {\n    if (page < 1) {\n      setPage(1)  // Increment page to 1 if it is less than 1.\n    }\n  }, [page]);\n\n\n  const filteredGenre = async () => {\n    const data = await fetch(\n      `https://api.themoviedb.org/3/discover/movie?with_genres=${activegenre}&api_key=${APIKEY}&with_origin_country=IN&page=${page}`\n    );\n    const filteredGenre = await data.json();\n    setMovies(movies.concat(filteredGenre.results)); // Concat new movies with previous movies, on genre change movies are reset to [] so that only movies of new genre will appear, check out useEffect on top for more information.\n    setTotalPage(filteredGenre.total_pages);\n    setLoader(false);\n    setHeader(\"Genres\");\n  };\n\n  const fetchSearch = async (query) => {\n    const data = await fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=${APIKEY}&with_origin_country=IN&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    const searchmovies = await data.json();\n    setSearchedMovies(searchmovies.results); \n    setLoader(false);\n    setHeader(`Results for \"${query}\"`);\n  }\n\n  const fetchGenre = async () => {\n    // const data = await fetch(\n    //   `https://api.themoviedb.org/3/genre/movie/list?api_key=${APIKEY}&with_origin_country=IN&language=en-US`\n    // );\n    // const gen = await data.json();\n    // setGenres(gen.genres);\n    // setLoader(false);\n\n    // setMovies(movies.concat(filteredGenre.results)); // Concat new movies with previous movies, on genre change movies are reset to [] so that only movies of new genre will appear, check out useEffect on top for more information.\n    // setTotalPage(filteredGenre.total_pages);\n    // setLoader(false);\n    // setHeader(\"Genres\");\n\n    const data = await fetch(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=${APIKEY}&with_origin_country=IN&language=en-US`\n    );\n    const genRes = await data.json();\n    setGenreList(genreList.concat(genRes.results));\n    setTotalPage(genRes.total_pages);\n    setLoader(false);\n    setHeader(\"Genres Movies\");\n  }\n\n  const fetchTrending = async () => {\n    const data = await fetch(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${APIKEY}&with_origin_country=IN&page=${page}`\n    );\n    const trend = await data.json();\n    setTrending(trending.concat(trend.results));\n    setTotalPage(trend.total_pages);\n    setLoader(false);\n    setHeader(\"Trending Movies\");\n  }\n\n  const fetchUpcoming = async () => {\n    const data = await fetch(\n      `https://api.themoviedb.org/3/movie/upcoming?api_key=${APIKEY}&with_origin_country=IN&language=en-US&page=${page}`\n    );\n    const upc = await data.json();\n    setUpcoming(upcoming.concat(upc.results));\n    setTotalPage(upc.total_pages);\n    setLoader(false);\n    setHeader(\"Upcoming Movies\");\n  }\n\n  // creat local storage\n  const GetFavorite = () => {\n    setLoader(false);\n    setHeader(\"Favorite Movies\");\n  }\n\n  return (\n    <Contextpage.Provider\n      value={{\n        fetchGenre,\n        genres,\n        setGenres,\n        filteredGenre,\n        header,\n        setHeader,\n        movies,\n        setMovies,\n        page,\n        setPage,\n        activegenre,\n        setActiveGenre,\n        fetchSearch,\n        loader,\n        setBackGenre,\n        backgenre,\n        setLoader,\n        fetchTrending,\n        trending,\n        fetchUpcoming,\n        setTrending,\n        upcoming,\n        GetFavorite,\n        totalPage,\n        searchedMovies\n      }}\n    >\n      {children}\n    </Contextpage.Provider>\n  );\n\n}\n\nexport default Contextpage\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}